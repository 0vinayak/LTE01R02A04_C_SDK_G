/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools.
 */

#ifndef DATA_H
#define DATA_H
#endif

// #ifdef cplusplus_
// extern "C"
// {
// #endif
#include "pbtools.h"

/**
 * Enum com.emotorad.backend.AggregationFlink.data.Bike.Engmode.
 */
enum com_emotorad_backend_aggregation_flink_data_bike_engmode_e
{
    com_emotorad_backend_aggregation_flink_data_bike_sna_e = 0,
    com_emotorad_backend_aggregation_flink_data_bike_reserved_e = 1,
    com_emotorad_backend_aggregation_flink_data_bike_eco_e = 2,
    com_emotorad_backend_aggregation_flink_data_bike_urban_e = 3,
    com_emotorad_backend_aggregation_flink_data_bike_lab_e = 4,
    com_emotorad_backend_aggregation_flink_data_bike_fitness_e = 5
};

/**
 * Message com.emotorad.backend.AggregationFlink.data.Bike.
 */
struct com_emotorad_backend_aggregation_flink_data_bike_repeated_t
{
    int length;
    struct com_emotorad_backend_aggregation_flink_data_bike_t *items_p;
};

struct com_emotorad_backend_aggregation_flink_data_bike_t
{
    struct pbtools_message_base_t base;
    uint32_t vehicle_speed;
    uint32_t motor_speed;
    uint32_t battery_voltage;
    uint32_t soc;
    uint32_t throttle;
    bool throttle_cut_off;
    uint32_t pas;
    enum com_emotorad_backend_aggregation_flink_data_bike_engmode_e eng_mode;
    uint32_t distance_to_empty;
    uint32_t calories;
    double current_trip_distance;
    uint32_t current_trip_max_speed;
    uint32_t child_mode_speed_limit;
    bool side_stand;
    bool headlamp;
    bool brake;
    bool cruise_control;
    bool walk_mode;
    double vehicle_odo_reading;
    bool motor_hall_failure;
    bool motor_line_short_circuit_fault;
    bool brake_failure;
    bool handle_bar_failure;
    bool battery_under_voltage_fault;
    bool display_and_mcu_comm_failure;
    bool overvoltage_fault;
    bool controller_opamp_failure;
    bool motor_stall_fault;
    uint32_t mcu_debug_signal0;
    uint32_t mcu_debug_signal1;
    uint32_t mcu_debug_signal2;
    uint32_t mcu_debug_signal3;
    uint32_t ble_debug_signal0;
    uint32_t ble_debug_signal1;
    uint32_t ble_debug_signal2;
    uint32_t ble_debug_signal3;
    char *emuser_id_p;
    char *vin_p;
    double latitude;
    double longitude;
    double altitude;
    uint64_t time;
};

/**
 * Message com.emotorad.backend.AggregationFlink.data.Trip1.
 */
struct com_emotorad_backend_aggregation_flink_data_trip1_repeated_t
{
    int length;
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *items_p;
};

struct com_emotorad_backend_aggregation_flink_data_trip1_t
{
    struct pbtools_message_base_t base;
    uint32_t max_speed;
    uint32_t trip_distance;
    uint32_t trip_duration;
    uint32_t average_speed;
    uint32_t motor_on_duration;
    uint32_t trip_power;
    uint32_t start_soc;
    uint32_t end_soc;
    char *emuser_id_p;
    char *vin_p;
    uint64_t time;
};

/**
 * Message com.emotorad.backend.AggregationFlink.data.Trip2.
 */
struct com_emotorad_backend_aggregation_flink_data_trip2_repeated_t
{
    int length;
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *items_p;
};

struct com_emotorad_backend_aggregation_flink_data_trip2_t
{
    struct pbtools_message_base_t base;
    uint32_t eco_duration;
    uint32_t urban_duration;
    uint32_t lab_duration;
    uint32_t fitness_duration;
    char *emuser_id_p;
    char *vin_p;
    uint64_t time;
};

/**
 * Message com.emotorad.backend.AggregationFlink.data.End.
 */
struct com_emotorad_backend_aggregation_flink_data_end_repeated_t
{
    int length;
    struct com_emotorad_backend_aggregation_flink_data_end_t *items_p;
};

struct com_emotorad_backend_aggregation_flink_data_end_t
{
    struct pbtools_message_base_t base;
    char *emuser_id_p;
    char *vin_p;
    uint64_t time;
};

/**
 * Encoding and decoding of com.emotorad.backend.AggregationFlink.data.Bike.
 */
struct com_emotorad_backend_aggregation_flink_data_bike_t *
com_emotorad_backend_aggregation_flink_data_bike_new(
    void *workspace_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_bike_encode(
    struct com_emotorad_backend_aggregation_flink_data_bike_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_bike_decode(
    struct com_emotorad_backend_aggregation_flink_data_bike_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of com.emotorad.backend.AggregationFlink.data.Trip1.
 */
struct com_emotorad_backend_aggregation_flink_data_trip1_t *
com_emotorad_backend_aggregation_flink_data_trip1_new(
    void *workspace_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_trip1_encode(
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_trip1_decode(
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of com.emotorad.backend.AggregationFlink.data.Trip2.
 */
struct com_emotorad_backend_aggregation_flink_data_trip2_t *
com_emotorad_backend_aggregation_flink_data_trip2_new(
    void *workspace_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_trip2_encode(
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_trip2_decode(
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/**
 * Encoding and decoding of com.emotorad.backend.AggregationFlink.data.End.
 */
struct com_emotorad_backend_aggregation_flink_data_end_t *
com_emotorad_backend_aggregation_flink_data_end_new(
    void *workspace_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_end_encode(
    struct com_emotorad_backend_aggregation_flink_data_end_t *self_p,
    uint8_t *encoded_p,
    size_t size);

int com_emotorad_backend_aggregation_flink_data_end_decode(
    struct com_emotorad_backend_aggregation_flink_data_end_t *self_p,
    const uint8_t *encoded_p,
    size_t size);

/* Internal functions. Do not use! */

void com_emotorad_backend_aggregation_flink_data_bike_init(
    struct com_emotorad_backend_aggregation_flink_data_bike_t *self_p,
    struct pbtools_heap_t *heap_p);

void com_emotorad_backend_aggregation_flink_data_bike_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct com_emotorad_backend_aggregation_flink_data_bike_t *self_p);

void com_emotorad_backend_aggregation_flink_data_bike_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct com_emotorad_backend_aggregation_flink_data_bike_t *self_p);

void com_emotorad_backend_aggregation_flink_data_bike_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct com_emotorad_backend_aggregation_flink_data_bike_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_bike_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct com_emotorad_backend_aggregation_flink_data_bike_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_trip1_init(
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *self_p,
    struct pbtools_heap_t *heap_p);

void com_emotorad_backend_aggregation_flink_data_trip1_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *self_p);

void com_emotorad_backend_aggregation_flink_data_trip1_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct com_emotorad_backend_aggregation_flink_data_trip1_t *self_p);

void com_emotorad_backend_aggregation_flink_data_trip1_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct com_emotorad_backend_aggregation_flink_data_trip1_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_trip1_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct com_emotorad_backend_aggregation_flink_data_trip1_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_trip2_init(
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *self_p,
    struct pbtools_heap_t *heap_p);

void com_emotorad_backend_aggregation_flink_data_trip2_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *self_p);

void com_emotorad_backend_aggregation_flink_data_trip2_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct com_emotorad_backend_aggregation_flink_data_trip2_t *self_p);

void com_emotorad_backend_aggregation_flink_data_trip2_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct com_emotorad_backend_aggregation_flink_data_trip2_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_trip2_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct com_emotorad_backend_aggregation_flink_data_trip2_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_end_init(
    struct com_emotorad_backend_aggregation_flink_data_end_t *self_p,
    struct pbtools_heap_t *heap_p);

void com_emotorad_backend_aggregation_flink_data_end_encode_inner(
    struct pbtools_encoder_t *encoder_p,
    struct com_emotorad_backend_aggregation_flink_data_end_t *self_p);

void com_emotorad_backend_aggregation_flink_data_end_decode_inner(
    struct pbtools_decoder_t *decoder_p,
    struct com_emotorad_backend_aggregation_flink_data_end_t *self_p);

void com_emotorad_backend_aggregation_flink_data_end_encode_repeated_inner(
    struct pbtools_encoder_t *encoder_p,
    int field_number,
    struct com_emotorad_backend_aggregation_flink_data_end_repeated_t *repeated_p);

void com_emotorad_backend_aggregation_flink_data_end_decode_repeated_inner(
    struct pbtools_decoder_t *decoder_p,
    struct pbtools_repeated_info_t *repeated_info_p,
    struct com_emotorad_backend_aggregation_flink_data_end_repeated_t *repeated_p);
// }
// ;

// #ifdef 1
// }
// #endif

// #endif
