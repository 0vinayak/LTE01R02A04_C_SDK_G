/*
* Copyright (c) 2016, Spreadtrum Communications.
*
* The above copyright notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#ifndef SPRD_PROXY_CRYPTO_IPC_H_
#define SPRD_PROXY_CRYPTO_IPC_H_

#include "sprd_pal_plat.h"

#define PROXY_CRYPTO_PORT "com.proxy.trusty.crypto"
#define PROXY_CRYPTO_MAX_BUFFER_LENGTH 8192

// Commands
enum proxy_crypto_command
{
    PROXY_CRYPTO_RESP_BIT = 1,
    PROXY_CRYPTO_CONT_BIT = 2,
    PROXY_CRYPTO_REQ_SHIFT = 2,

    PROXY_CRYPTO_AES_INIT = (0 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AES_UPDATE = (1 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AES_FINAL = (2 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AUTHENC_INIT = (3 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AUTHENC_UPDATE_AAD = (4 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AUTHENC_UPDATE = (5 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_AUTHENC_FINAL = (6 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_DES_INIT = (7 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_DES_UPDATE = (8 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_DES_FINAL = (9 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM4_INIT = (10 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM4_UPDATE = (11 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM4_FINAL = (12 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HASH_INIT = (13 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HASH_UPDATE = (14 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HASH_FINAL = (15 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_CMAC_INIT = (16 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_CMAC_UPDATE = (17 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_CMAC_FINAL = (18 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HMAC_INIT = (19 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HMAC_UPDATE = (20 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HMAC_FINAL = (21 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_ECC_GENKEY = (22 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_ECC_SIGN = (23 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_ECC_VERIFY = (24 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM2_GENKEY = (25 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM2_SIGN = (26 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM2_VERIFY = (27 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM2_ENCRYPT = (28 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_SM2_DECRYPT = (29 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RSA_GENKEY = (30 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RSA_SIGN = (31 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RSA_VERIFY = (32 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RSA_ENCRYPT = (33 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RSA_DECRYPT = (34 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_RNG_GEN = (35 << PROXY_CRYPTO_REQ_SHIFT),
    PROXY_CRYPTO_HUK_DERIVE = (36 << PROXY_CRYPTO_REQ_SHIFT),
};

// Errors
enum proxy_crypto_error
{
    PROXY_CRYPTO_NO_ERROR = 0,
    PROXY_CRYPTO_CONNECT_FAILED = 1,
    PROXY_CRYPTO_SEND_REQ_FAILED = 2,
    PROXY_CRYPTO_READ_RES_FAILED = 3,
    PROXY_CRYPTO_DISCONNECT_FAILED = 4,
};

/**
 * proxy_crypto_message_t - Serial header for communicating with PROXY_CRYPTO server
 * @cmd: the command, one of proxy_crypto_command.
 * @payload: start of the serialized command specific payload
 */
typedef struct
{
    uint32_t cmd;
    uint8_t payload[0];
} proxy_crypto_message_t;

#endif
